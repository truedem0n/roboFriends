{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(data => {\n    dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    });\n  }).catch(error => {\n    dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    });\n  });\n};","map":{"version":3,"sources":["/home/skylord/Documents/Projects/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AACA,SACEA,mBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKO,aALP;AAQA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AAAEC,EAAAA,IAAI,EAAEN,mBAAR;AAA6BO,EAAAA,OAAO,EAAEF;AAAtC,CAAX,CAAvB;AAEP,OAAO,MAAMG,aAAa,GAAG,MAAMC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAI;AAAEL,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEJ,sBAAR;AAAgCK,MAAAA,OAAO,EAAEO;AAAzC,KAAD,CAAR;AAA2D,GAF7E,EAGGC,KAHH,CAGSC,KAAK,IAAI;AAAEP,IAAAA,QAAQ,CAAC;AAAEH,MAAAA,IAAI,EAAEH,qBAAR;AAA+BI,MAAAA,OAAO,EAAES;AAAxC,KAAD,CAAR;AAA2D,GAH/E;AAKD,CAPM","sourcesContent":["\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from './constants'\n\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text })\n\nexport const requestRobots = () =>(dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => { dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }) })\n    .catch(error => { dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }) })\n\n}"]},"metadata":{},"sourceType":"module"}